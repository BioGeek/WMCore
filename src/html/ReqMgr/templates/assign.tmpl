<header class="group">
    <nav class="navbar navbar-left">
        <h2>Assign interface</h2>
    </nav>
    <nav class="navbar navbar-right">
        <ul>
        <li><button class="btn btn-small btn-yellow bold" id="btn-manage" onclick="activateManage()">Settings</button></li>
        <li><button class="btn btn-small btn-active" id="btn-requests" onclick="activateRequests()">Requests</button></li>
        </ul>
    </nav>
</header>
<hr/>

<script>
var requests = $requests;
</script>

<div id="requests">

$filter_sort_table

<div class="group">
    <nav class="navbar navbar-left">
        <input type="checkbox" name="request-all" id="request-all" onclick="CheckAll(this)"/>
        Select all requests
    </nav>
    <nav class="navbar navbar-right">
        <button class="btn btn-smaller btn-green" onclick="javascript:confirmAssign()">Assign</button>
        <button class="btn btn-smaller btn-red" onclick="javascript:ProcessRequests('rejected')">Reject</button>
    </nav>
</div>

<hr/>

<div id="container"></div>
</div> <!-- end of requests section -->

<div id="manage" class="hide">
<h4>Assign settings</h4>

<form id="assign-settings" name="assign-settings">
<h5>Site lists</h5>
<ul class="blocks-3">
    <li>Whitelist<br/>
        <select name="SiteWhitelist" class="width-50" multiple="multiple" size="10">
        #for site in $sites
        #if $site in $site_white_list
        <option value="$site" selected="selected">$site</option>
        #else
        <option value="$site">$site</option>
        #end if
        #end for
        </select>
    </li>
    <li>Blacklist<br/>
        <select name="SiteBlacklist" class="width-50" multiple="multiple" size="10">
        #for site in $sites
        #if $site in $site_black_list
        <option value="$site" selected="selected">$site</option>
        #else
        <option value="$site">$site</option>
        #end if
        #end for
        </select>
    </li>
</ul>

<hr/>

<h5>PhEDEx subscription</h5>
<ul class="blocks-3">
    <li>Custodial sites<br/>
        <select name="CustodialSites" class="width-50" multiple="multiple" size="10">
        #for site in $sites
        #if $site.startswith("T1")
        <option value="$site">$site</option>
        #end if
        #end for
        </select>
    </li>
    <li>Non-Custodial sites<br/>
        <select name="NonCustodialSites" class="width-50" multiple="multiple" size="10">
        #for site in $sites
        #if $site.startswith("T2")
        <option value="$site">$site</option>
        #end if
        #end for
        </select>
    </li>
    <li>Auto-Approve subscription sites<br/>
        <select name="AutoApproveSubscriptionSites" class="width-50" multiple="multiple" size="10">
        #for site in $sites
        <option value="$site">$site</option>
        #end for
        </select>
    </li>
</ul>

</form>

<hr/>

<div id="misc-options"> <!-- Misc Options -->
<div class="group">
    <nav class="navbar navbar-left">
        <h5>Misc Options</h5>
    </nav>
    <nav class="navbar navbar-right">
        <ul>
        <li><button class="btn btn-small btn-active" id="btn-misc-table" onclick="activateMiscTable()">Table</button></li>
        <li><button class="btn btn-small" id="btn-misc-json" onclick="activateMiscJSON()">JSON</button></li>
        </ul>
    </nav>
</div>
<form id="assign-misc-settings" name="assign-misc-settings">
<div id="misc-table">
$misc_table
</div>
<div id="misc-json" class="hide">
<textarea class="editor height-200" name="jsondict" id="jsondict">
$misc_json
</textarea>
</div>
</form>
</div> <!-- Misc Options -->

</div> <!-- end of manage section -->

<div id="splitting" name="splitting" class="hide">
<div align="right"><a href="javascript:HideTag('splitting')">Close</a></div>
<div id="splittingTasks"></div>
<div><a href="javascript:HideTag('splitting')">Close</a></div>
</div>

<script>
var TaskData; // global parameter to keep task data on a page
function activateMiscTable() {
    id = document.getElementById('btn-misc-json');
    id.className="btn btn-small";
    HideTag('misc-json');
    // show active button
    var id = document.getElementById('btn-misc-table');
    id.className="btn btn-small btn-active";
    ShowTag('misc-table');
}
function activateMiscJSON() {
    id = document.getElementById('btn-misc-table');
    id.className="btn btn-small";
    HideTag('misc-table');
    // show active button
    var id = document.getElementById('btn-misc-json');
    id.className="btn btn-small btn-active";
    ShowTag('misc-json');
}
function activateRequests() {
    id = document.getElementById('btn-manage');
    id.className="btn btn-small btn-yellow bold";
    HideTag('manage');
    // show active button
    var id = document.getElementById('btn-requests');
    id.className="btn btn-small btn-active";
    ShowTag('requests');
}
function activateManage() {
    id = document.getElementById('btn-requests');
    id.className="btn btn-small";
    HideTag('requests');
    // show active button
    var id = document.getElementById('btn-manage');
    id.className="btn btn-small btn-active";
    ShowTag('manage');
}
function confirmAssign() {
    var doc = document.getElementById('confirmation');
    var msg = '<h3>Please note</h3>';
    msg += 'Chosen requests require individual settings. If you already set them please click <em>Assign</em> button below, otherwise click <em>Cancel</em> button and go to <em>Settings</em> section where you can adjust your request settings';
    var html = '<div>'+msg+'</div>';
    html += '<div>';
    html += '<button class="btn btn-small right" onclick="javascript:cleanConfirmation()">Cancel</button>';
    html += '<button class="btn btn-small btn-green bold right" onclick="javascript:ProcessRequests(\'assigned\')">Assign</button>';
    html += '</div>';
    doc.innerHTML=html;
    doc.className='width-50 tools-alert tools-message-yellow confirmation shadow';
}
// helper function to call server side ajax_action method and pass
// along action method, request ids, and new status
// assign interface changes assignment-approved requests into assigned or rejected
function ProcessRequests(new_status) {
    var items = document.getElementsByClassName('request-id');
    var ids=[];
    for (var i = 0; i < items.length; i++ ) {
        if(items[i].checked==true) {
            ids.push(items[i].name);
            items[i].disabled='disabled';
        }
    }
    if (ids.length>0) {
        // capture form id="assign-settings"
        var parameters = \$('#assign-settings').serializeObject();
        // capture form id="assign-misc-settings"
        var misc_args = \$('#assign-misc-settings').serializeObject();
        // merge misc_args with parameters
        for (var attr in misc_args) { parameters[attr] = misc_args[attr]; }
        parameters.ids = ids;
        parameters.new_status = new_status;
        ajaxRequest('$base/data/request/multi_update', parameters);
    }
}
var _order=1; // global variable to keep track of asc/desc order on web UI
function BuildList(tag, data) {
    if(_order%2) {
        data.reverse();
    }
    _order += 1;
    var container = document.getElementById('container');
    container.innerHTML="";
    var listContainer = document.createElement('div');
    container.appendChild(listContainer);
    var listElement = document.createElement("ul");
    listContainer.appendChild(listElement);
    data.forEach(function(item) {
        var html = '<div>';
        var rid = 'request-'+item.RequestName;
        html += '<button class="btn btn-small bold alignRight" onclick="activateSplitting(\''+item.RequestName+'\')">Splitting</button>'
        html += '<input type="checkbox" name="'+rid+'" id="'+rid+'" class="request-id" /> '
        html += '<b>Request:</b> <span class="record"><a href="$base/fetch?rid='+rid+'">'+item.RequestName+'</a></span><br/>';
        html += '<b>Status:</b> <span style="color:'+genColor(item.RequestStatus)+';background-color:#fff;padding:3px;">'+item.RequestStatus+'</span>&nbsp;';
        html += '<b>Date:</b> <code>'+item.RequestDate+'</code>&nbsp;';
        html += '<b>User:</b> '+item.Requestor+'&nbsp;';
        html += '<b>Group:</b> '+item.Group;
        html += '</div><hr/>'
        var listItem = document.createElement("li");
        listItem.innerHTML = html;
        listElement.appendChild(listItem);
    });
    // change CSS
    var items = document.getElementsByClassName('menu-item');
    for (var i = 0; i < items.length; i++ ) {
        items[i].className='menu-item';
    }
    tag.className='menu-item underline';
}
function activateSplitting(rname) {
    ShowTag('splitting');
    ajaxRequestSplitting('$base/data/splitting/web_form'+rname, 'taskParams');
}
function ajaxRequestSplitting(path, tag) {
    var request = $.ajax({
        url: path,
        contentType: "application/json",
        type: 'GET',
        dataType: "json"
    });
    request.done(function(data, msg, xhr) {
        TaskData = data.result;
    });
}
// helper function to construct valid href for given type/tag
function ActionTag(type, tag) {
    if (type == 'show') {
        return "<a href=\"javascript:ExpandTask('"+tag+"');\">Show</a>";
    } else {
        return "<a href=\"javascript:CollideTask('"+tag+"');\">Hide</a>";
    }
}
// helper function to expand all tasks on task web page
function ExpandAllTasks() {
    $('[name="taskName"]').show();
}
// helper function to collide all tasks on task web page
function CollideAllTasks() {
    $('[name="taskName"]').hide();
}
// helper function to expand specific task on task web page
function ExpandTask(t) {
    $('[id="'+t+'"]').show();
}
// helper function to collide specific task on task web page
function CollideTask(t) {
    $('[id="'+t+'"]').hide();
}
// extract algorithms for give task name
function Algs(taskName) {
    var task = FindTask(taskName);
	var params = task.splitParamList;
    var algs = [];
    for(var i=0;i<params.length; i++) {
        var p = params[i];
        for(var key in p) {
            if(key=="algorithm") {
                algs.push(p[key]);
            }
        }
    }
    return algs;
}
// extract parameters for given task and algorithm
function FindParams(taskName, alg) {
    var task = FindTask(taskName);
    var params = task.splitParamList;
    for(var i=0;i<params.length;i++) {
        if (params[i].algorithm == alg) {
            return params[i];
        }
    }
}
// helper function to switch algorithm info
function SwitchAlg(tag) {
    var alg = document.getElementById(tag).value;
    var taskName = tag.replace("__ALG__", "");
    var params = FindParams(taskName, alg);
    var t = '[id="__TABLE__'+taskName+'"]';
    $(t).replaceWith(AlgInfo(taskName, params));
}
// helper function to build algorithm info on web UI
function AlgInfo(taskName, params) {
    var html = "";
    html += '<div id="__TABLE__'+taskName+'">'
    html += '<table class="taskParams width-200">\n';
    for(var key in params) {
        if (params.hasOwnProperty(key) && key!="algorithm") {
            var v = params[key];
            if (String(v)=="false") {
                html += '<tr><td>'+key+'</td><td><select name="'+key+'"><option>false</option><option>true</option></select></td></tr>\n';
            } else if (String(v)=="true") {
                html += '<tr><td>'+key+'</td><td><select name="'+key+'"><option>true</option><option>false</option></select></td></tr>\n';
            } else {
                html += '<tr><td>'+key+'</td><td><input class="visible_input" name="'+key+'" type="text" value="'+v+'" /></td></tr>\n';
            }
        }
    }
    html += '<tr><td></td><td><button class="btn btn-small btn-green bold" onclick="javascript:SubmitTask(\''+taskName+'\')">Submit</button></td></tr>\n';
    html += '</table></div>\n';
    return html
}
// function to freeze task parameters on web UI
function FreezeTaskParams(taskName) {
    var tag = '[id="__FORM__'+taskName+'"]';
    var params = $(tag).serializeArray();
    var html = '<h3>Submitted parameters:</h3><div class="taskParams">\n';
    tag = '[id="__ALG__'+taskName+'"]';
    var alg = $(tag).val();
    html += '<b>Algorithm:</b> '+alg+'<br/>\n';
    for(var i=0; i<params.length; i++) {
        html += '<b>'+params[i]['name']+':</b> '+params[i]['value']+'<br/>\n';
    }
    html += '</div>\n';
    tag = '[id="__TABLE__'+taskName+'"]';
    $(tag).replaceWith(html);
    tag = '[id="__ALG__'+taskName+'"]';
    $(tag).replaceWith("");
}
// function to submit task parameters
function SubmitTask(taskName) {
    var tag = '[id="__FORM__'+taskName+'"]';
    // params = [{"name":key, "value":key_value}, ...]
    var params = $(tag).serializeArray();
    FreezeTaskParams(taskName);
    var args = {};
    for(var i=0; i<params.length; i++) {
        args[params[i]['name']] = params[i]['value'];
    }
    ajaxRequest('$base/data/splitting/'+taskName, JSON.parse(args), 'POST');
}
// build task params section on web UI
function TaskParams(taskName) {
    var algs = Algs(taskName);
    var html = '<div id="'+taskName+'" class="hide" name="taskName">';
    html += '<form id="__FORM__'+taskName+'">';
    var atag = '__ALG__'+taskName;
	html += '<select id="'+atag+'" onchange="javascript:SwitchAlg(\''+atag+'\');">';
        for(var i=0;i<algs.length;i++) {
            html += '<option value="'+algs[i]+'">'+algs[i]+'</option>';
        }
    html += '</select>'
	var params = FindParams(taskName, algs[0]);
    html += AlgInfo(taskName, params);
    html += '</div></form>';
    return html;
}
// make task entry on web UI for given task name
function MakeTask(taskName) {
    var html = '<div id="task_'+taskName+'">';
    html += "<b>"+taskName+"</b> "+ActionTag('show', taskName)+" | "+ActionTag('hide', taskName);
    html += TaskParams(taskName);
    html += "</div>";
    return html;
}
// extract task data from task data for given task name
function FindTask(taskName) {
    for(var i=0; i<TaskData.length; i++) {
        if(TaskData[i].taskName==taskName) {
            return TaskData[i];
        }
    }
}
function PlaceTasks(tag) {
    var html = '<div class="tasks">';
    html += "<a href=\"javascript:ExpandAllTasks()\">Show All</a> | ";
    html += "<a href=\"javascript:CollideAllTasks()\">Hide All</a>";
    for(var i=0; i<TaskData.length; i++) {
        html += MakeTask(TaskData[i].taskName);
    }
    html += "</div>";
    var id = document.getElementById(tag);
    id.innerHTML = html;
}
PlaceTasks("splittingTasks");
// Put data into container
BuildList(document.getElementsByClassName('menu-item')[0], requests.filter(ByPattern).sort(ByDate));
</script>
